[project]
name = "grazer"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = "<3.13,>=3.11"
dependencies = [
    "torch==2.5.1",
    "transformers==4.46.2",
    "torchvision==0.20.1",
    "timm==1.0.11",
    "sentence_transformers==3.2.1",
    "xgboost==2.1.2",
    "aiohttp==3.11.2",
    "runpod==1.7.7",
    "atproto==0.0.53",
    "python-dotenv~=1.0.0",
    "rq==2.0.0",
    "requests==2.32.3",
    "pillow==11.0.0",
    "inflection==0.5.1",
    "zstandard==0.23.0",
    "websocket-client==1.8.0",
    "openai==1.54.4",
    "nest_asyncio==1.6.0",
    "pyre2==0.3.6",
    "sentry-sdk==2.19.0",
    "timm==1.0.11",
    "ray==2.43.0",
    "cachetools==5.5.1",
    "aiorwlock==1.5.0",
    "numpy",
    "uvicorn==0.34.0",
    "grpcio==1.71.0",
    "opentelemetry-api>=1.31.1",
    "opentelemetry-sdk>=1.31.1",
    "opentelemetry-exporter-otlp>=1.31.1",
    "opentelemetry-instrumentation>=0.52b1",
    "opentelemetry-instrumentation-requests>=0.52b1",
    "pydantic-settings",
    "pydantic-core>=2.33.1",
    "pydantic>=2.11.4",
    "certifi>=2025.4.26",

]

[project.optional-dependencies]
build = ["cython>=3.0.12", "ninja>=1.11.1.3", "setuptools>=75.8.2"]
streamer = [
    "aioboto3>=14.1.0",
    "websockets==13.1",
    "types-aioboto3[sqs]",
    "redis",
    "pydantic-settings",
    "pydantic-core>=2.33.1",
    "pydantic>=2.11.4",
    "sentry-sdk==2.19.0",
]


[dependency-groups]
dev = [
    "flake8>=7.1.2",
    "pytest==8.3.5",
    "pytest-cov==6.0.0",
    "pytest-mock==3.14.0",
    "pytest-asyncio==0.25.3",
]


[build-system]
requires = ["setuptools", "wheel", "ninja"]
build-backend = "setuptools.build_meta"

[tool.pdm.scripts]

# Lint all
lint = "flake8"

# Test all
test = "pytest tests"

# Example:
# pdm img_build ghcr.io/grazer:$(git rev-parse --short HEAD)
img_build = { shell = "docker build -t {args: grazer:local} ." }

# Startup commands

# Intialize Ray
ray_init = { shell = "ray stop && ray start --head --dashboard-host=0.0.0.0 --dashboard-port 8080" }

# NOTE: The following commands start a process in the background and dump stdout to a nohup.out file in the root directory
# Cache Worker
start_cache_worker = { shell = "nohup python run_ray_cache.py --name cache:main --num-cpus 2 --num-gpus 0 &" }

# Network Worker
start_network_worker = { shell = "nohup python run_ray_network_worker.py --name network:main --num-workers 5 --num-cpus 0.1 --num-gpus 0 &" }

# GPU Worker
start_gpu_worker = { shell = "nohup python run_ray_gpu_worker.py --name gpu --num-workers 3 --num-cpus 0.5 --num-gpus 0.2 &" }

# CPU Worker
start_cpu_worker = { shell = "nohup python run_ray_cpu_worker.py --name cpu:main --num-workers 6 --num-cpus 0.5 --num-gpus 0 &" }

# Runpod Worker
start_runpod_worker = { cmd = ["python3", "run_runpod_worker.py"] }

# Kube Worker
start_kube_worker = { cmd = ["python3", "run_kube_worker.py"] }

# Jetstreamer
start_streamer = { cmd = [
    "python3",
    "run_streamer.py",
], env_file = ".env.streamer" }

# Jetstreamer
algo_sync = { cmd = ["python3", "algo_sync.py"], env_file = ".env.algosync" }

sqs_push_batch = { cmd = ["python3", "scratch/sqs.py"] }

tail_output = { shell = "tail -f -n 300 nohup.out" }

# Starts all ray workers and tails the log output
start_all_workers.composite = [
    "ray_init",
    "start_cache_worker",
    "start_network_worker",
    "start_cpu_worker",
    "start_gpu_worker",
    "tail_output",
]

start_all_workers.env = { RAY_DEDUP_LOGS = "0", REDIS_URL = "redis://localhost:6379", SENTRY_DSN = "https://foo:bar@example.com/12345" }

[tool.pyright]
venvPath = "."
venv = ".venv"
