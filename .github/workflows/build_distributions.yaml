name: Build Grazer Distributions
on:
  pull_request:
    types:
      - closed
      - synchronize
    branches:
      - main
    paths-ignore:
      - .github/**/*
      - deploy/**/*
      - tests/**/*
jobs:
  setup:
    name: setup
    outputs:
      version_tag: ${{ steps.create_tag.outputs.VERSION_TAG }}
      buildkit_builder: ${{steps.setup_buildx.outputs.name}}
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: setup_svu
        run: curl -kL https://github.com/caarlos0/svu/releases/download/v3.2.2/svu_3.2.2_linux_amd64.tar.gz | tar zx && mv svu /usr/local/bin/svu && chmod +x /usr/local/bin/svu

      - name: create_tag
        id: create_tag
        run: |
          echo "VERSION_TAG=$(svu next)" >> $GITHUB_ENV
          echo "VERSION_TAG=$(svu next)" >> $GITHUB_OUTPUT

      - name: setup_qemu
        uses: docker/setup-qemu-action@v2

      - name: setup_buildx
        id: setup_buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64,linux/arm64

      - name: configure_aws_credentials
        uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.ECR_ASSUME_ROLE }}
          role-external-id: grazebuilder
          role-duration-seconds: 1200
          role-session-name: grazebuild
          role-skip-session-tagging: true
          aws-region: ${{ secrets.CONTAINER_REGION }}

      - name: login_to_ecr
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: "true"

  build_client:
    runs-on: [ubuntu-latest]
    needs: [setup]
    env:
      BUILDER: "${{needs.setup.outputs.buildkit_builder}}"
      VERSION_TAG: ${{needs.setup.outputs.version_tag}}.client
    steps:
      - run: echo "${{toJSON(needs.setup.outputs)}}"
      - name: build_and_push
        uses: docker/build-push-action@v4
        with:
          builder: "$BUILDER"
          context: .
          push: true
          tags: |
            ${{secrets.CONTAINER_REPO}}:$VERSION_TAG

  build_cluster:
    runs-on: [ubuntu-latest]
    needs: [setup]
    steps:
      - name: build_and_push
        uses: docker/build-push-action@v4
        env:
          BUILDER: "${{needs.setup.outputs.buildkit_builder}}"
          VERSION_TAG: ${{needs.setup.outputs.version_tag}}.cluster
        with:
          builder: "$BUILDER"
          context: .
          file: Dockerfile.cluster
          push: true
          tags: |
            ${{secrets.CONTAINER_REPO}}:$VERSION_TAG

  create_release:
    runs-on: [ubuntu-latest]
    needs: [setup, build_client, build_cluster]
    steps:
      - name: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
          VERSION_TAG: ${{needs.setup.outputs.version_tag}}
        run: |-
          gh release create ${{ env.VERSION_TAG }} -t ${{ env.VERSION_TAG }} -n "Release version image available: ${{ env.ECR_REPO }}:${{ env.VERSION_TAG }}"

  notify:
    runs-on: [ubuntu-latest]
    if: ${{ contains(join(needs.*.result, ','), 'success') }}
    needs: [build_client, build_cluster, create_release]
    steps:
      - name: discord_notify_hook
        uses: stegzilla/discord-notify@v2
        with:
          webhook_url: ${{ secrets.DEV_CHANNEL_DISCORD_WEBHOOK }}
          title: "Grazer `${{ needs.setup.outputs.version_tag }}` Images Built and Pushed"
          message: "**Download: ${{secrets.CONTAINER_REPO}}:${{needs.setup.outputs.version_tag}}.(client|cluster)**"
          include_image: true
          custom_image_url: https://avatars.githubusercontent.com/u/196731666?s=400&v=4
          avatar_url: https://avatars.githubusercontent.com/u/196731666?s=48&v=4
          username: Graze Deploy Bot
          colour: "#0090ff"
